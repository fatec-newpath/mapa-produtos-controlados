@startuml controlled_map_generator_class_diagram
skinparam linetype ortho

package Sistema-Gerenciador-Mapa-Produtos-Controlados {
    class Address <<entity>> {
        - UUID id
        - String publicPlace
        - String number
        - String neighborhood
        - String city
        - String state
        - String cep
        - String complement

        + getFullAddressText(UUID id): String
    }

    class AddressService <<control>>{
        + updateAddressInformation(Address address): Boolean
        + addNewAddress(Address address): Boolean
    }

    class Company <<entity>>{
        - UUID id
        - String corporateReason
        - String cnpj
        - String phone
        - Address address

        + createOrUpdateCompanyProfile(Company company): Boolean
        + getCompanyInfo(UUID id): Company
    }

    class Supplier <<entity>>{
        - UUID id
        - String corporateReason
        - String cnpj
        - String phone
        - Address address

        + getSupplierInfo(UUID id): Supplier
        + createOrUpdateSupplier(Supplier supplier): UUID
        + bulkCreateSuppliersIfNotExists(List<Supplier> Suppliers): Boolean
        + removeSupplier(UUID id): Boolean
    }

    class User <<entity>>{
        - UUID id
        - String name
        - String cpf
        - String rg
        - String phone
        - String email
        - String password
        - String profilePictureUrl
        - boolean isActive

        + getLoggedUser(UUID id): User
        + authenticateUser(String email, Password password): User
        + updateUserProfile(User user): Boolean
        + resetPassword(UUID id, String newPassword): Boolean
        + changeProfilePicture(UUID id, String url_link): Boolean
    }

    class Product <<entity>>{
        - UUID id
        - String name
        - String measurementUnit
        - Company company

        + getProductInfo(UUID id): Product
        + getManufacturerInfo(UUID id): Company
        + changeMeasurementUnit(UUID id, String newMeasurementUnit): Boolean
        + addNewProduct(Product product): UUID
    }

    class Invoice <<entity>> {
        - UUID id
        - String invoiceNumber
        - String path
        - Supplier supplier
        - User registrationUser
        - Company company

        + getInvoiceFullData(UUID id): Invoice
        + getInvoiceBySupplier(Supplier supplier)
    }

    class InvoiceService <<control>>{
        + importNewInvoice(String xmlFile)
        + extractSuppliers(Invoice invoice): List<Supplier>
    }

    class ProductMovimentationIn <<entity>>{
        - UUID id
        - BigDecimal quantity
        - DateTime purchaseDate
        - Invoice invoice
        - Product product
        - Supplier supplier
        - User registrationUser
        - Company company
    }

    class ProductMovimentationService <<control>>{
        + getListOfProductsByDate(DateTime purchaseDate) : List<Product>
        + addNewProductMovimentationIn(Product product, Invoice fromInvoice): Boolean
    }

    class ProductMovimentationOut <<entity>>{
        - UUID id
        - BigDecimal quantity
        - String destination
        - DateTime consumptionDate
        - Product product
        - User registrationUser
        - Company company

        + addNewProductConsumption(ProductMovimentationOut prodMovOut): String
        + sumAllComsumptionsByDate(DateTime consumptionDate): Float
        + notifyLowStockQuantity(): void
    }

    class ProductMapHistoryProduct <<entity>>{
        - UUID id
        - BigDecimal remainingQuantity
        - BigDecimal purchasedQuantity
        - BigDecimal totalConsumed
        - BigDecimal totalLost
        - BigDecimal finalQuantity
        - ProductMapHistory productMapHistory
        - Product product

        + getAllProductsFromMap(ProductMapHistory mapId): List<Products>
        + createOrUpdateProductMap(ProductMapHistory productMap) : Boolean
        + downloadMap(UUID id): Byte[]
        + deleteProductMap(UUID id): Boolean
    }

    class ProductMapHistory <<entity>>{
        - UUID id
        - DateTime generatedDate
        - boolean isOriginal
        - Company company

        + getAllMapsGeneratedByCompany(Company company): List<ProductMapHistory>
        + registerAnyModifications(): void
    }

    Company "1" *-- "1" Address : has
    User "1" *-- "1" Address : has
    User "1" *-- "*" Company : works-for
    Supplier "1" *-- "1" Address : has
    Invoice "1" *-- "1" Supplier : issued-by >
    Invoice "1" *-- "1" User : imported-by >
    ProductMovimentationIn "1..*" *-- "1" Invoice : added-by >
    ProductMovimentationIn "1..*" *-- "1" Product : contains >
    ProductMovimentationIn "1" *-- "1" Supplier : from >
    ProductMovimentationIn "1..*" o-[hidden]- "1" User : registered-by >
    ProductMovimentationOut "1..*" *-- "*" Product : contains >
    ProductMovimentationOut "1..*" o-[hidden]- "1" User : registered-by >
    ProductMapHistoryProduct "1..*" *-- "*" ProductMapHistory : part-of >
    ProductMapHistoryProduct "1..*" *-- "*" Product : has-many >

}
@enduml
